// <auto-generated />
using System;
using Binner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Binner.Data.Migrations.MySql.Migrations
{
    [DbContext(typeof(BinnerContext))]
    [Migration("20240406014015_AddTmePartNumber")]
    partial class AddTmePartNumber
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Binner.Data.Model.Label", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsPartLabelTemplate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LabelTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LabelId");

                    b.HasIndex("LabelTemplateId");

                    b.ToTable("Labels", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.LabelTemplate", b =>
                {
                    b.Property<int>("LabelTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Dpi")
                        .HasColumnType("int");

                    b.Property<int>("DriverHeight")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .HasColumnType("longtext");

                    b.Property<int>("DriverWidth")
                        .HasColumnType("int");

                    b.Property<string>("ExtraData")
                        .HasColumnType("longtext");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LabelCount")
                        .HasColumnType("int");

                    b.Property<int>("LabelPaperSource")
                        .HasColumnType("int");

                    b.Property<string>("Margin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("LabelTemplateId");

                    b.ToTable("LabelTemplates", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.OAuthCredential", b =>
                {
                    b.Property<string>("Provider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateExpiresUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Provider");

                    b.HasIndex("UserId");

                    b.ToTable("OAuthCredentials", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.OAuthRequest", b =>
                {
                    b.Property<int>("OAuthRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("AuthorizationReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Error")
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorDescription")
                        .HasColumnType("longtext");

                    b.Property<long>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReturnToUrl")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OAuthRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("OAuthRequests", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModifiedUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.Part", b =>
                {
                    b.Property<long>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ArrowPartNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("BinNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BinNumber2")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("DatasheetUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigiKeyPartNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExtensionValue1")
                        .HasColumnType("longtext");

                    b.Property<string>("ExtensionValue2")
                        .HasColumnType("longtext");

                    b.Property<string>("FootprintName")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Keywords")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("int");

                    b.Property<string>("LowestCostSupplier")
                        .HasColumnType("longtext");

                    b.Property<string>("LowestCostSupplierUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MountingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MouserPartNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PackageType")
                        .HasColumnType("longtext");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<long>("PartTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductUrl")
                        .HasColumnType("longtext");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("SymbolName")
                        .HasColumnType("longtext");

                    b.Property<string>("TmePartNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PartId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.HasIndex("BinNumber", "UserId");

                    b.HasIndex("BinNumber2", "UserId");

                    b.HasIndex("Description", "UserId");

                    b.HasIndex("DigiKeyPartNumber", "UserId");

                    b.HasIndex("Keywords", "UserId");

                    b.HasIndex("Location", "UserId");

                    b.HasIndex("Manufacturer", "UserId");

                    b.HasIndex("ManufacturerPartNumber", "UserId");

                    b.HasIndex("MouserPartNumber", "UserId");

                    b.HasIndex("PartNumber", "UserId");

                    b.HasIndex("PartTypeId", "UserId");

                    b.ToTable("Parts", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.PartSupplier", b =>
                {
                    b.Property<long>("PartSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("MinimumOrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<long>("PartId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<string>("SupplierPartNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PartSupplierId");

                    b.HasIndex("PartId");

                    b.HasIndex("UserId");

                    b.ToTable("PartSuppliers", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.PartType", b =>
                {
                    b.Property<long>("PartTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentPartTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PartTypeId");

                    b.HasIndex("ParentPartTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("Name", "UserId");

                    b.ToTable("PartTypes", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.Pcb", b =>
                {
                    b.Property<long>("PcbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("LastSerialNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumberFormat")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PcbId");

                    b.HasIndex("UserId");

                    b.ToTable("Pcbs", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.PcbStoredFileAssignment", b =>
                {
                    b.Property<long>("PcbStoredFileAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<long>("PcbId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoredFileId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PcbStoredFileAssignmentId");

                    b.HasIndex("PcbId");

                    b.HasIndex("StoredFileId");

                    b.HasIndex("UserId");

                    b.ToTable("PcbStoredFileAssignments", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.Project", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.HasIndex("Name", "UserId");

                    b.ToTable("Projects", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectPartAssignment", b =>
                {
                    b.Property<long>("ProjectPartAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<long?>("PartId")
                        .HasColumnType("bigint");

                    b.Property<string>("PartName")
                        .HasColumnType("longtext");

                    b.Property<long?>("PcbId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("longtext");

                    b.Property<string>("SchematicReferenceId")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectPartAssignmentId");

                    b.HasIndex("PartId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectPartAssignments", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectPcbAssignment", b =>
                {
                    b.Property<long>("ProjectPcbAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<long>("PcbId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectPcbAssignmentId");

                    b.HasIndex("PcbId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectPcbAssignments", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectPcbProduceHistory", b =>
                {
                    b.Property<long>("ProjectPcbProduceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PartsConsumed")
                        .HasColumnType("int");

                    b.Property<double>("PcbCost")
                        .HasColumnType("double");

                    b.Property<long?>("PcbId")
                        .HasColumnType("bigint");

                    b.Property<int>("PcbQuantity")
                        .HasColumnType("int");

                    b.Property<long>("ProjectProduceHistoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectPcbProduceHistoryId");

                    b.HasIndex("PcbId");

                    b.HasIndex("ProjectProduceHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectPcbProduceHistory", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectProduceHistory", b =>
                {
                    b.Property<long>("ProjectProduceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PartsConsumed")
                        .HasColumnType("int");

                    b.Property<bool>("ProduceUnassociated")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectProduceHistoryId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectProduceHistory", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.StoredFile", b =>
                {
                    b.Property<long>("StoredFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Crc32")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("FileLength")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("PartId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<int>("StoredFileType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StoredFileId");

                    b.HasIndex("PartId");

                    b.HasIndex("UserId");

                    b.ToTable("StoredFiles", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DateEmailConfirmedUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateLastActiveUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateLastLoginUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateLockedUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("longtext");

                    b.Property<long>("EmailConfirmedIp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailSubscribed")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("LastSetPasswordIp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("LocaleCurrency")
                        .HasColumnType("longtext");

                    b.Property<string>("LocaleLanguage")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("longblob");

                    b.Property<double?>("ReCaptchaScore")
                        .HasColumnType("double");

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("Name");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.UserIntegrationConfiguration", b =>
                {
                    b.Property<int>("UserIntegrationConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ArrowApiKey")
                        .HasColumnType("longtext");

                    b.Property<string>("ArrowApiUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ArrowEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ArrowUsername")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DigiKeyApiUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("DigiKeyClientId")
                        .HasColumnType("longtext");

                    b.Property<string>("DigiKeyClientSecret")
                        .HasColumnType("longtext");

                    b.Property<bool>("DigiKeyEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DigiKeyOAuthPostbackUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("MouserApiUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("MouserCartApiKey")
                        .HasColumnType("longtext");

                    b.Property<bool>("MouserEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MouserOrderApiKey")
                        .HasColumnType("longtext");

                    b.Property<string>("MouserSearchApiKey")
                        .HasColumnType("longtext");

                    b.Property<string>("OctopartClientId")
                        .HasColumnType("longtext");

                    b.Property<string>("OctopartClientSecret")
                        .HasColumnType("longtext");

                    b.Property<bool>("OctopartEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("SwarmApiKey")
                        .HasColumnType("longtext");

                    b.Property<string>("SwarmApiUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("SwarmEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan?>("SwarmTimeout")
                        .HasColumnType("time(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserIntegrationConfigurationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserIntegrationConfigurations", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.UserLoginHistory", b =>
                {
                    b.Property<int>("UserLoginHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<long>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<double?>("ReCaptchaScore")
                        .HasColumnType("double");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserLoginHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistory", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.UserPrinterConfiguration", b =>
                {
                    b.Property<int>("UserPrinterConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PartLabelName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PartLabelSource")
                        .HasColumnType("int");

                    b.Property<string>("PrinterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RemoteAddressUrl")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPrinterConfigurationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPrinterConfigurations", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.UserPrinterTemplateConfiguration", b =>
                {
                    b.Property<int>("UserPrinterTemplateConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AutoSize")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Barcode")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("FontName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FontSize")
                        .HasColumnType("int");

                    b.Property<int>("Label")
                        .HasColumnType("int");

                    b.Property<int>("Line")
                        .HasColumnType("int");

                    b.Property<bool>("LowerCase")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MarginBottom")
                        .HasColumnType("int");

                    b.Property<int>("MarginLeft")
                        .HasColumnType("int");

                    b.Property<int>("MarginRight")
                        .HasColumnType("int");

                    b.Property<int>("MarginTop")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Rotate")
                        .HasColumnType("int");

                    b.Property<bool>("UpperCase")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserPrinterConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("UserPrinterTemplateConfigurationId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPrinterConfigurationId");

                    b.ToTable("UserPrinterTemplateConfigurations", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.UserToken", b =>
                {
                    b.Property<int>("UserTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DateExpiredUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModifiedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DateRevokedUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TokenTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens", "dbo");
                });

            modelBuilder.Entity("Binner.Data.Model.Label", b =>
                {
                    b.HasOne("Binner.Data.Model.LabelTemplate", "LabelTemplate")
                        .WithMany("Labels")
                        .HasForeignKey("LabelTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabelTemplate");
                });

            modelBuilder.Entity("Binner.Data.Model.OAuthCredential", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("OAuthCredentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.OAuthRequest", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("OAuthRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.Part", b =>
                {
                    b.HasOne("Binner.Data.Model.PartType", "PartType")
                        .WithMany("Parts")
                        .HasForeignKey("PartTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.Project", "Project")
                        .WithMany("Parts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("Parts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PartType");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.PartSupplier", b =>
                {
                    b.HasOne("Binner.Data.Model.Part", "Part")
                        .WithMany("PartSuppliers")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("PartSuppliers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Part");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.PartType", b =>
                {
                    b.HasOne("Binner.Data.Model.PartType", "ParentPartType")
                        .WithMany()
                        .HasForeignKey("ParentPartTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("PartTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentPartType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.Pcb", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("Pcbs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.PcbStoredFileAssignment", b =>
                {
                    b.HasOne("Binner.Data.Model.Pcb", "Pcb")
                        .WithMany("PcbStoredFileAssignments")
                        .HasForeignKey("PcbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.StoredFile", "StoredFile")
                        .WithMany("PcbStoredFileAssignments")
                        .HasForeignKey("StoredFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("PcbStoredFileAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Pcb");

                    b.Navigation("StoredFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.Project", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectPartAssignment", b =>
                {
                    b.HasOne("Binner.Data.Model.Part", "Part")
                        .WithMany("ProjectPartAssignments")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Binner.Data.Model.Project", "Project")
                        .WithMany("ProjectPartAssignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("ProjectPartAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Part");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectPcbAssignment", b =>
                {
                    b.HasOne("Binner.Data.Model.Pcb", "Pcb")
                        .WithMany("ProjectPcbAssignments")
                        .HasForeignKey("PcbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.Project", "Project")
                        .WithMany("ProjectPcbAssignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("ProjectPcbAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Pcb");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectPcbProduceHistory", b =>
                {
                    b.HasOne("Binner.Data.Model.Pcb", "Pcb")
                        .WithMany("ProjectPcbProduceHistory")
                        .HasForeignKey("PcbId");

                    b.HasOne("Binner.Data.Model.ProjectProduceHistory", "ProjectProduceHistory")
                        .WithMany("ProjectPcbProduceHistory")
                        .HasForeignKey("ProjectProduceHistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("ProjectPcbProduceHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Pcb");

                    b.Navigation("ProjectProduceHistory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectProduceHistory", b =>
                {
                    b.HasOne("Binner.Data.Model.Project", "Project")
                        .WithMany("ProjectProduceHistory")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("ProjectProduceHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.StoredFile", b =>
                {
                    b.HasOne("Binner.Data.Model.Part", "Part")
                        .WithMany("StoredFiles")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("StoredFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Part");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.UserIntegrationConfiguration", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("UserIntegrationConfigurations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.UserLoginHistory", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("UserLoginHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.UserPrinterConfiguration", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("UserPrinterConfigurations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.UserPrinterTemplateConfiguration", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("UserPrinterTemplateConfigurations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Binner.Data.Model.UserPrinterConfiguration", "UserPrinterConfiguration")
                        .WithMany("UserPrinterTemplateConfigurations")
                        .HasForeignKey("UserPrinterConfigurationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserPrinterConfiguration");
                });

            modelBuilder.Entity("Binner.Data.Model.UserToken", b =>
                {
                    b.HasOne("Binner.Data.Model.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Binner.Data.Model.LabelTemplate", b =>
                {
                    b.Navigation("Labels");
                });

            modelBuilder.Entity("Binner.Data.Model.Part", b =>
                {
                    b.Navigation("PartSuppliers");

                    b.Navigation("ProjectPartAssignments");

                    b.Navigation("StoredFiles");
                });

            modelBuilder.Entity("Binner.Data.Model.PartType", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("Binner.Data.Model.Pcb", b =>
                {
                    b.Navigation("PcbStoredFileAssignments");

                    b.Navigation("ProjectPcbAssignments");

                    b.Navigation("ProjectPcbProduceHistory");
                });

            modelBuilder.Entity("Binner.Data.Model.Project", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("ProjectPartAssignments");

                    b.Navigation("ProjectPcbAssignments");

                    b.Navigation("ProjectProduceHistory");
                });

            modelBuilder.Entity("Binner.Data.Model.ProjectProduceHistory", b =>
                {
                    b.Navigation("ProjectPcbProduceHistory");
                });

            modelBuilder.Entity("Binner.Data.Model.StoredFile", b =>
                {
                    b.Navigation("PcbStoredFileAssignments");
                });

            modelBuilder.Entity("Binner.Data.Model.User", b =>
                {
                    b.Navigation("OAuthCredentials");

                    b.Navigation("OAuthRequests");

                    b.Navigation("PartSuppliers");

                    b.Navigation("PartTypes");

                    b.Navigation("Parts");

                    b.Navigation("PcbStoredFileAssignments");

                    b.Navigation("Pcbs");

                    b.Navigation("ProjectPartAssignments");

                    b.Navigation("ProjectPcbAssignments");

                    b.Navigation("ProjectPcbProduceHistory");

                    b.Navigation("ProjectProduceHistory");

                    b.Navigation("Projects");

                    b.Navigation("StoredFiles");

                    b.Navigation("UserIntegrationConfigurations");

                    b.Navigation("UserLoginHistory");

                    b.Navigation("UserPrinterConfigurations");

                    b.Navigation("UserPrinterTemplateConfigurations");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("Binner.Data.Model.UserPrinterConfiguration", b =>
                {
                    b.Navigation("UserPrinterTemplateConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
