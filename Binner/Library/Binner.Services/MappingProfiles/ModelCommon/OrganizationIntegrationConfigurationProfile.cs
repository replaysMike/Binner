using AutoMapper;
using Binner.Model.Configuration;
using DataModel = Binner.Data.Model;

namespace Binner.Services.MappingProfiles
{
    public class OrganizationIntegrationConfigurationProfile : Profile
    {
        public OrganizationIntegrationConfigurationProfile()
        {
            CreateMap<DataModel.OrganizationIntegrationConfiguration, OrganizationIntegrationConfiguration>()
                .ForMember(x => x.SwarmEnabled, options => options.MapFrom(x => x.SwarmEnabled))
                .ForMember(x => x.SwarmApiKey, options => options.MapFrom(x => x.SwarmApiKey))
                .ForMember(x => x.SwarmApiUrl, options => options.MapFrom(x => x.SwarmApiUrl))
                .ForMember(x => x.SwarmTimeout, options => options.MapFrom(x => x.SwarmTimeout))
                .ForMember(x => x.DigiKeyEnabled, options => options.MapFrom(x => x.DigiKeyEnabled))
                .ForMember(x => x.DigiKeySite, options => options.MapFrom(x => x.DigiKeySite))
                .ForMember(x => x.DigiKeyClientId, options => options.MapFrom(x => x.DigiKeyClientId))
                .ForMember(x => x.DigiKeyClientSecret, options => options.MapFrom(x => x.DigiKeyClientSecret))
                .ForMember(x => x.DigiKeyOAuthPostbackUrl, options => options.MapFrom(x => x.DigiKeyOAuthPostbackUrl))
                .ForMember(x => x.DigiKeyApiUrl, options => options.MapFrom(x => x.DigiKeyApiUrl))
                .ForMember(x => x.MouserEnabled, options => options.MapFrom(x => x.MouserEnabled))
                .ForMember(x => x.MouserSearchApiKey, options => options.MapFrom(x => x.MouserSearchApiKey))
                .ForMember(x => x.MouserCartApiKey, options => options.MapFrom(x => x.MouserCartApiKey))
                .ForMember(x => x.MouserOrderApiKey, options => options.MapFrom(x => x.MouserOrderApiKey))
                .ForMember(x => x.MouserApiUrl, options => options.MapFrom(x => x.MouserApiUrl))
                .ForMember(x => x.ArrowEnabled, options => options.MapFrom(x => x.ArrowEnabled))
                .ForMember(x => x.ArrowUsername, options => options.MapFrom(x => x.ArrowUsername))
                .ForMember(x => x.ArrowApiKey, options => options.MapFrom(x => x.ArrowApiKey))
                .ForMember(x => x.ArrowApiUrl, options => options.MapFrom(x => x.ArrowApiUrl))
                .ForMember(x => x.NexarEnabled, options => options.MapFrom(x => x.NexarEnabled))
                .ForMember(x => x.NexarClientId, options => options.MapFrom(x => x.NexarClientId))
                .ForMember(x => x.NexarClientSecret, options => options.MapFrom(x => x.NexarClientSecret))
                .ForMember(x => x.TmeEnabled, options => options.MapFrom(x => x.TmeEnabled))
                .ForMember(x => x.TmeApiKey, options => options.MapFrom(x => x.TmeApiKey))
                .ForMember(x => x.TmeApplicationSecret, options => options.MapFrom(x => x.TmeApplicationSecret))
                .ForMember(x => x.TmeCountry, options => options.MapFrom(x => x.TmeCountry))
                .ForMember(x => x.TmeApiUrl, options => options.MapFrom(x => x.TmeApiUrl))
                .ForMember(x => x.TmeResolveExternalLinks, options => options.MapFrom(x => x.TmeResolveExternalLinks))
                .ForMember(x => x.Element14Enabled, options => options.MapFrom(x => x.Element14Enabled))
                .ForMember(x => x.Element14ApiKey, options => options.MapFrom(x => x.Element14ApiKey))
                .ForMember(x => x.Element14Country, options => options.MapFrom(x => x.Element14Country))
                .ForMember(x => x.Element14ApiUrl, options => options.MapFrom(x => x.Element14ApiUrl))
            ;

            CreateMap<OrganizationIntegrationConfiguration, DataModel.OrganizationIntegrationConfiguration>()
                .ForMember(x => x.SwarmEnabled, options => options.MapFrom(x => x.SwarmEnabled))
                .ForMember(x => x.SwarmApiKey, options => options.MapFrom(x => x.SwarmApiKey))
                .ForMember(x => x.SwarmApiUrl, options => options.MapFrom(x => x.SwarmApiUrl))
                .ForMember(x => x.SwarmTimeout, options => options.MapFrom(x => x.SwarmTimeout))
                .ForMember(x => x.DigiKeyEnabled, options => options.MapFrom(x => x.DigiKeyEnabled))
                .ForMember(x => x.DigiKeySite, options => options.MapFrom(x => x.DigiKeySite))
                .ForMember(x => x.DigiKeyClientId, options => options.MapFrom(x => x.DigiKeyClientId))
                .ForMember(x => x.DigiKeyClientSecret, options => options.MapFrom(x => x.DigiKeyClientSecret))
                .ForMember(x => x.DigiKeyOAuthPostbackUrl, options => options.MapFrom(x => x.DigiKeyOAuthPostbackUrl))
                .ForMember(x => x.DigiKeyApiUrl, options => options.MapFrom(x => x.DigiKeyApiUrl))
                .ForMember(x => x.MouserEnabled, options => options.MapFrom(x => x.MouserEnabled))
                .ForMember(x => x.MouserSearchApiKey, options => options.MapFrom(x => x.MouserSearchApiKey))
                .ForMember(x => x.MouserCartApiKey, options => options.MapFrom(x => x.MouserCartApiKey))
                .ForMember(x => x.MouserOrderApiKey, options => options.MapFrom(x => x.MouserOrderApiKey))
                .ForMember(x => x.MouserApiUrl, options => options.MapFrom(x => x.MouserApiUrl))
                .ForMember(x => x.ArrowEnabled, options => options.MapFrom(x => x.ArrowEnabled))
                .ForMember(x => x.ArrowUsername, options => options.MapFrom(x => x.ArrowUsername))
                .ForMember(x => x.ArrowApiKey, options => options.MapFrom(x => x.ArrowApiKey))
                .ForMember(x => x.ArrowApiUrl, options => options.MapFrom(x => x.ArrowApiUrl))
                .ForMember(x => x.NexarEnabled, options => options.MapFrom(x => x.NexarEnabled))
                .ForMember(x => x.NexarClientId, options => options.MapFrom(x => x.NexarClientId))
                .ForMember(x => x.NexarClientSecret, options => options.MapFrom(x => x.NexarClientSecret))
                .ForMember(x => x.TmeEnabled, options => options.MapFrom(x => x.TmeEnabled))
                .ForMember(x => x.TmeApiKey, options => options.MapFrom(x => x.TmeApiKey))
                .ForMember(x => x.TmeApplicationSecret, options => options.MapFrom(x => x.TmeApplicationSecret))
                .ForMember(x => x.TmeCountry, options => options.MapFrom(x => x.TmeCountry))
                .ForMember(x => x.TmeApiUrl, options => options.MapFrom(x => x.TmeApiUrl))
                .ForMember(x => x.TmeResolveExternalLinks, options => options.MapFrom(x => x.TmeResolveExternalLinks))
                .ForMember(x => x.Element14Enabled, options => options.MapFrom(x => x.Element14Enabled))
                .ForMember(x => x.Element14ApiKey, options => options.MapFrom(x => x.Element14ApiKey))
                .ForMember(x => x.Element14Country, options => options.MapFrom(x => x.Element14Country))
                .ForMember(x => x.Element14ApiUrl, options => options.MapFrom(x => x.Element14ApiUrl))

                .ForMember(x => x.DateCreatedUtc, options => options.Ignore())
                .ForMember(x => x.DateModifiedUtc, options => options.Ignore())
                .ForMember(x => x.OrganizationIntegrationConfigurationId, options => options.Ignore())
                .ForMember(x => x.OrganizationId, options => options.Ignore())
                .ForMember(x => x.Organization, options => options.Ignore())
                ;

            CreateMap<IntegrationConfiguration, OrganizationIntegrationConfiguration>()
                .ForMember(x => x.SwarmEnabled, options => options.MapFrom(x => x.Swarm.Enabled))
                .ForMember(x => x.SwarmApiKey, options => options.MapFrom(x => x.Swarm.ApiKey))
                .ForMember(x => x.SwarmApiUrl, options => options.MapFrom(x => x.Swarm.ApiUrl))
                .ForMember(x => x.SwarmTimeout, options => options.MapFrom(x => x.Swarm.Timeout))
                .ForMember(x => x.DigiKeyEnabled, options => options.MapFrom(x => x.Digikey.Enabled))
                .ForMember(x => x.DigiKeySite, options => options.MapFrom(x => x.Digikey.Site))
                .ForMember(x => x.DigiKeyClientId, options => options.MapFrom(x => x.Digikey.ClientId))
                .ForMember(x => x.DigiKeyClientSecret, options => options.MapFrom(x => x.Digikey.ClientSecret))
                .ForMember(x => x.DigiKeyOAuthPostbackUrl, options => options.MapFrom(x => x.Digikey.oAuthPostbackUrl))
                .ForMember(x => x.DigiKeyApiUrl, options => options.MapFrom(x => x.Digikey.ApiUrl))
                .ForMember(x => x.MouserEnabled, options => options.MapFrom(x => x.Mouser.Enabled))
                .ForMember(x => x.MouserSearchApiKey, options => options.MapFrom(x => x.Mouser.ApiKeys.SearchApiKey))
                .ForMember(x => x.MouserCartApiKey, options => options.MapFrom(x => x.Mouser.ApiKeys.CartApiKey))
                .ForMember(x => x.MouserOrderApiKey, options => options.MapFrom(x => x.Mouser.ApiKeys.OrderApiKey))
                .ForMember(x => x.MouserApiUrl, options => options.MapFrom(x => x.Mouser.ApiUrl))
                .ForMember(x => x.ArrowEnabled, options => options.MapFrom(x => x.Arrow.Enabled))
                .ForMember(x => x.ArrowUsername, options => options.MapFrom(x => x.Arrow.Username))
                .ForMember(x => x.ArrowApiKey, options => options.MapFrom(x => x.Arrow.ApiKey))
                .ForMember(x => x.ArrowApiUrl, options => options.MapFrom(x => x.Arrow.ApiUrl))
                .ForMember(x => x.NexarEnabled, options => options.MapFrom(x => x.Nexar.Enabled))
                .ForMember(x => x.NexarClientId, options => options.MapFrom(x => x.Nexar.ClientId))
                .ForMember(x => x.NexarClientSecret, options => options.MapFrom(x => x.Nexar.ClientSecret))
                .ForMember(x => x.TmeEnabled, options => options.MapFrom(x => x.Tme.Enabled))
                .ForMember(x => x.TmeApiKey, options => options.MapFrom(x => x.Tme.ApiKey))
                .ForMember(x => x.TmeApplicationSecret, options => options.MapFrom(x => x.Tme.ApplicationSecret))
                .ForMember(x => x.TmeCountry, options => options.MapFrom(x => x.Tme.Country))
                .ForMember(x => x.TmeApiUrl, options => options.MapFrom(x => x.Tme.ApiUrl))
                .ForMember(x => x.TmeResolveExternalLinks, options => options.MapFrom(x => x.Tme.ResolveExternalLinks))
                .ForMember(x => x.Element14Enabled, options => options.MapFrom(x => x.Element14.Enabled))
                .ForMember(x => x.Element14ApiKey, options => options.MapFrom(x => x.Element14.ApiKey))
                .ForMember(x => x.Element14Country, options => options.MapFrom(x => x.Element14.Country))
                .ForMember(x => x.Element14ApiUrl, options => options.MapFrom(x => x.Element14.ApiUrl))
                .ReverseMap()
            ;
        }
    }
}
